## The purpose of these functions is as follows:
##      1. calculate the inverse of a matrix
##      2. cache the inverse of a matrix
##      3. return the cached inverse if the matrix does not change
##      4. caculate the inverse if the matrix changed
## The makeCacheMatrix function creates a matrix object and can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL #initialize variable to hold the inverse matrix
set <-function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse,
getinverse = getinverse)
}
## The cacheSolve function computes the inverse of the matrix object created
## by the makeCacheMatrix function. If the inverse has already been computed,
## then the cacheSolve function will retrieve the cached inverse matrix.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)){
mess("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
aMatrix <- makeCacheMatrix(matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2))
aMatrix$get()
aMatrix$getinverse
## The purpose of these functions is as follows:
##      1. calculate the inverse of a matrix
##      2. cache the inverse of a matrix
##      3. return the cached inverse if the matrix does not change
##      4. caculate the inverse if the matrix changed
## The makeCacheMatrix function creates a matrix object and can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL #initialize variable to hold the inverse matrix
set <-function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse,
getinverse = getinverse)
}
## The cacheSolve function computes the inverse of the matrix object created
## by the makeCacheMatrix function. If the inverse has already been computed,
## then the cacheSolve function will retrieve the cached inverse matrix.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(inv)){
mess("getting cached data")
return(i)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(i)
inv
}
aMatrix <- makeCacheMatrix(matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2))
aMatrix$get()
aMatrix$getinverse()
cacheSolve(aMatrix)
## The purpose of these functions is as follows:
##      1. calculate the inverse of a matrix
##      2. cache the inverse of a matrix
##      3. return the cached inverse if the matrix does not change
##      4. caculate the inverse if the matrix changed
## The makeCacheMatrix function creates a matrix object and can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL #initialize variable to hold the inverse matrix
set <-function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse,
getinverse = getinverse)
}
## The cacheSolve function computes the inverse of the matrix object created
## by the makeCacheMatrix function. If the inverse has already been computed,
## then the cacheSolve function will retrieve the cached inverse matrix.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)){
mess("getting cached data")
return(i)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(i)
inv
}
cacheSolve(aMatrix)
cacheSolve(aMatrix)
aMatrix$getinverse()
## The purpose of these functions is as follows:
##      1. calculate the inverse of a matrix
##      2. cache the inverse of a matrix
##      3. return the cached inverse if the matrix does not change
##      4. caculate the inverse if the matrix changed
## The makeCacheMatrix function creates a matrix object and can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL #initialize variable to hold the inverse matrix
set <-function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse,
getinverse = getinverse)
}
## The cacheSolve function computes the inverse of the matrix object created
## by the makeCacheMatrix function. If the inverse has already been computed,
## then the cacheSolve function will retrieve the cached inverse matrix.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(i)
inv
}
cacheSolve(aMatrix)
aMatrix$getinverse()
## The purpose of these functions is as follows:
##      1. calculate the inverse of a matrix
##      2. cache the inverse of a matrix
##      3. return the cached inverse if the matrix does not change
##      4. caculate the inverse if the matrix changed
## The makeCacheMatrix function creates a matrix object and can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL #initialize variable to hold the inverse matrix
set <-function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse,
getinverse = getinverse)
}
## The cacheSolve function computes the inverse of the matrix object created
## by the makeCacheMatrix function. If the inverse has already been computed,
## then the cacheSolve function will retrieve the cached inverse matrix.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
cacheSolve(aMatrix)
cacheSolve(aMatrix)
n2 <- matrix(c(5/8, -1/8, -7/8, 3/8), nrow = 2, ncol = 2)
aMatrix$set(n2)
cacheSolve(aMatrix)
cacheSolve(aMatrix)
